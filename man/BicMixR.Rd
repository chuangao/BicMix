% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BicMixWrapper.R
\name{BicMixR}
\alias{BicMixR}
\title{An algorithm for decomposing a high dimensional matrix into the product of a sparse loading matrix, and a sparse factor matrix.}
\usage{
BicMixR(
  y = NULL,
  nf = 100,
  a = 0.5,
  b = 0.5,
  c = 0.5,
  d = 0.5,
  e = 0.5,
  f = 0.5,
  itr = 5001,
  rsd = NULL,
  out_itr = 200,
  out_dir = NULL,
  lam_method = "matrix",
  x_method = "dense",
  tol = 1e-10,
  qnorm = TRUE,
  nf_min = 1
)
}
\arguments{
\item{y}{matrix to be decomposed, no missing values are allowed, each row is a feature and each column is a sample}

\item{nf}{the number of factors to start with, default to 100}

\item{a}{first shape parameter for the tpb distribution at the local level of the hierarchy, default to 0.5 to recapitulate horseshoe}

\item{b}{second shape parameter for the tpb distribution at the local level of the hierarchy, default to 0.5 to recapitulate horseshoe}

\item{c}{first shape parameter for the tpb distribution at the component specific level of the hierarchy, default to 0.5 to recapitulate horseshoe}

\item{d}{second shape parameter for the tpb distribution at the component specific level of the hierarchy, default to 0.5 to recapitulate horseshoe}

\item{e}{first shape parameter for the tpb distribution at the gloabal level of the hierarchy, default to 0.5 to recapitulate horseshoe}

\item{f}{second shape parameter for the tpb distribution at the global level of the hierarchy, default to 0.5 to recapitulate horseshoe}

\item{itr}{the maximum number of iterations the algorithm is allowed to run, default to 5000}

\item{rsd}{random seed used for initializing the parameter values, default to a randomly drawn number}

\item{out_itr}{iteration number at which the algorithm writes temporary output, default to 200}

\item{out_dir}{directory where the algorithm will write temporary output}

\item{lam_method}{the method used to update the loading matrix, take values either "matrix" or "element".  if "matrix", then all component are updated simultaneously (slower but more stable, don't need as many iterations to converge); if "element", each component is updated sequentially (faster but could beless stable, and need more iterations to converge), default to "matrix"}

\item{x_method}{whether induce sparsity on the X matrix, take values either "sparse" or "dense". default to "dense"}

\item{tol}{tolerance threshold for convergence, default to 1e-5}

\item{qnorm}{whether to quantile-normalize the gene expression matrix, default to TRUE}
}
\value{
lam: the sparse loading matrix

ex: the factor matrix

z: a vector indicating whether the loadings are sparse (1 indicate sparse)

o: a vector indicating whether the factors are sparse (1 indicate sparse)

nf: the number of factors learned by the model

exx: the expected value of the covariance matrix, E(XX^T)
}
\description{
An algorithm for decomposing a high dimensional matrix into the product of a sparse loading matrix, and a sparse factor matrix.
}
\examples{
library(BicMix)
## The following is an example on how to use BicMix to obtain biclusters (sparsity is induced on both the loading and factor matrices)
## simulate data
data = gen_BicMix_data(std=2, type.factor="mixture",rsd=123)
## Visualize the loading matrix
image(t(data$lam),x=1:ncol(data$lam),y=1:nrow(data$lam),xlab="Loadings",ylab="Samples")
## Visualize the factor matrix
image(t(data$ex),x=1:ncol(data$ex),y=1:nrow(data$ex),xlab="Samples",ylab="Factors")
## run BicMix on the simulated data
dir.create("results")
result = BicMixR(data$y,nf=100,out_dir="results",tol=1e-10,x_method="sparse",rsd=123)
## calculate a correlation matrix of the estimated loading matrix 
## and the true loading matrix. Ideally, there should be one and 
## only one big correlation value for a given row and column of the 
## correlation matrix
cor.est.real = cor(result$lam[,result$z==1],data$lams)
## visualize the correlation matrix
image(cor.est.real,x=1:nrow(cor.est.real),y=1:ncol(cor.est.real),
xlab="Recovered loadings",ylab="True loadings")
## calculate similarity score of the recovered loading matrix and the true loading matrix
cal_score_sparse(result$lam[,result$z>0.9],data$lams)
## The following is an example on how to use BicMix to obtain clustering of the genes, while keeping the X matrix sparse (sparsity is induced on the loading matrix, not on the factor matrix)
## simulate data
data = gen_BicMix_data(std=2, type.factor="dense", rsd = 123)
## perform analysis
result = BicMixR(data$y,nf=100,out_dir="results",tol=1e-10,x_method="dense",rsd=123)
## calculate similarity score of the recovered loading matrix and the true loading matrix
cal_score_sparse(result$lam[,result$z>0.9],data$lams)
}
\references{
\url{http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004791}
}
\author{
Chuan Gao <chuan.gao.cornell@gmail.com>
}
